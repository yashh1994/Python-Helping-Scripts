[
    {
        "label": "libtorrent",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "libtorrent",
        "description": "libtorrent",
        "detail": "libtorrent",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "mediapipe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mediapipe",
        "description": "mediapipe",
        "detail": "mediapipe",
        "documentation": {}
    },
    {
        "label": "ses",
        "kind": 5,
        "importPath": "Download Magnet movies.script",
        "description": "Download Magnet movies.script",
        "peekOfCode": "ses = lt.session()\nparams = {\n    'save_path': './downloads/',  # Folder to save downloads\n    'storage_mode': lt.storage_mode_t(2),\n    'paused': False,\n    'auto_managed': True,\n    'duplicate_is_error': True\n}\nhandle = lt.add_magnet_uri(ses, \"magnet_link_here\", params)\nprint(\"Downloading metadata...\")",
        "detail": "Download Magnet movies.script",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "Download Magnet movies.script",
        "description": "Download Magnet movies.script",
        "peekOfCode": "params = {\n    'save_path': './downloads/',  # Folder to save downloads\n    'storage_mode': lt.storage_mode_t(2),\n    'paused': False,\n    'auto_managed': True,\n    'duplicate_is_error': True\n}\nhandle = lt.add_magnet_uri(ses, \"magnet_link_here\", params)\nprint(\"Downloading metadata...\")\nwhile not handle.has_metadata():",
        "detail": "Download Magnet movies.script",
        "documentation": {}
    },
    {
        "label": "handle",
        "kind": 5,
        "importPath": "Download Magnet movies.script",
        "description": "Download Magnet movies.script",
        "peekOfCode": "handle = lt.add_magnet_uri(ses, \"magnet_link_here\", params)\nprint(\"Downloading metadata...\")\nwhile not handle.has_metadata():\n    time.sleep(1)\nprint(\"Metadata downloaded, starting torrent download...\")\nwhile handle.status().state != lt.torrent_status.seeding:\n    s = handle.status()\n    print(f\"Download: {s.progress * 100:.2f}% complete (down: {s.download_rate / 1000:.2f} kB/s up: {s.upload_rate / 1000:.2f} kB/s peers: {s.num_peers})\")\n    time.sleep(5)\nprint(\"Download complete!\")",
        "detail": "Download Magnet movies.script",
        "documentation": {}
    },
    {
        "label": "type_string_with_delay",
        "kind": 2,
        "importPath": "Keboard Writing.keyboard_writing",
        "description": "Keboard Writing.keyboard_writing",
        "peekOfCode": "def type_string_with_delay(input_string, delay):\n    # Wait for the specified delay\n    print('Start delay')\n    time.sleep(delay)\n    print('end delay')\n    # Type the input string using keyboard\n    pyautogui.typewrite(input_string)\nif __name__ == \"__main__\":\n    input_string = \"I believe I am an excellent fit for this role due to my comprehensive knowledge and practical experience in both fundamental and advanced aspects of machine learning. My proficiency in Python, combined with hands-on experience in web technologies such as Android, Web3, Flutter, React, and Node.js, allows me to develop versatile and efficient solutions. My eagerness to apply my skills in a real-world setting and my commitment to continuous learning will enable me to contribute effectively to your projects and objectives.\"\n    delay = 5  # Adjust the delay as needed",
        "detail": "Keboard Writing.keyboard_writing",
        "documentation": {}
    },
    {
        "label": "mp_hands",
        "kind": 5,
        "importPath": "Youtube Study Tool.plam_stop_play",
        "description": "Youtube Study Tool.plam_stop_play",
        "peekOfCode": "mp_hands = mp.solutions.hands\nhands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.5)\nmp_drawing = mp.solutions.drawing_utils\n# Initialize video capture\ncap = cv2.VideoCapture(0)\n# Variables to manage detection and delay\ndetection_time = 0\ndelay = 3  # seconds\npressed = False\ncanPress = False",
        "detail": "Youtube Study Tool.plam_stop_play",
        "documentation": {}
    },
    {
        "label": "hands",
        "kind": 5,
        "importPath": "Youtube Study Tool.plam_stop_play",
        "description": "Youtube Study Tool.plam_stop_play",
        "peekOfCode": "hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.5)\nmp_drawing = mp.solutions.drawing_utils\n# Initialize video capture\ncap = cv2.VideoCapture(0)\n# Variables to manage detection and delay\ndetection_time = 0\ndelay = 3  # seconds\npressed = False\ncanPress = False\nwhile cap.isOpened():",
        "detail": "Youtube Study Tool.plam_stop_play",
        "documentation": {}
    },
    {
        "label": "mp_drawing",
        "kind": 5,
        "importPath": "Youtube Study Tool.plam_stop_play",
        "description": "Youtube Study Tool.plam_stop_play",
        "peekOfCode": "mp_drawing = mp.solutions.drawing_utils\n# Initialize video capture\ncap = cv2.VideoCapture(0)\n# Variables to manage detection and delay\ndetection_time = 0\ndelay = 3  # seconds\npressed = False\ncanPress = False\nwhile cap.isOpened():\n    success, image = cap.read()",
        "detail": "Youtube Study Tool.plam_stop_play",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "Youtube Study Tool.plam_stop_play",
        "description": "Youtube Study Tool.plam_stop_play",
        "peekOfCode": "cap = cv2.VideoCapture(0)\n# Variables to manage detection and delay\ndetection_time = 0\ndelay = 3  # seconds\npressed = False\ncanPress = False\nwhile cap.isOpened():\n    success, image = cap.read()\n    if not success:\n        print(\"Ignoring empty camera frame.\")",
        "detail": "Youtube Study Tool.plam_stop_play",
        "documentation": {}
    },
    {
        "label": "detection_time",
        "kind": 5,
        "importPath": "Youtube Study Tool.plam_stop_play",
        "description": "Youtube Study Tool.plam_stop_play",
        "peekOfCode": "detection_time = 0\ndelay = 3  # seconds\npressed = False\ncanPress = False\nwhile cap.isOpened():\n    success, image = cap.read()\n    if not success:\n        print(\"Ignoring empty camera frame.\")\n        continue\n    # Convert the BGR image to RGB",
        "detail": "Youtube Study Tool.plam_stop_play",
        "documentation": {}
    },
    {
        "label": "delay",
        "kind": 5,
        "importPath": "Youtube Study Tool.plam_stop_play",
        "description": "Youtube Study Tool.plam_stop_play",
        "peekOfCode": "delay = 3  # seconds\npressed = False\ncanPress = False\nwhile cap.isOpened():\n    success, image = cap.read()\n    if not success:\n        print(\"Ignoring empty camera frame.\")\n        continue\n    # Convert the BGR image to RGB\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)",
        "detail": "Youtube Study Tool.plam_stop_play",
        "documentation": {}
    },
    {
        "label": "pressed",
        "kind": 5,
        "importPath": "Youtube Study Tool.plam_stop_play",
        "description": "Youtube Study Tool.plam_stop_play",
        "peekOfCode": "pressed = False\ncanPress = False\nwhile cap.isOpened():\n    success, image = cap.read()\n    if not success:\n        print(\"Ignoring empty camera frame.\")\n        continue\n    # Convert the BGR image to RGB\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    results = hands.process(image_rgb)",
        "detail": "Youtube Study Tool.plam_stop_play",
        "documentation": {}
    },
    {
        "label": "canPress",
        "kind": 5,
        "importPath": "Youtube Study Tool.plam_stop_play",
        "description": "Youtube Study Tool.plam_stop_play",
        "peekOfCode": "canPress = False\nwhile cap.isOpened():\n    success, image = cap.read()\n    if not success:\n        print(\"Ignoring empty camera frame.\")\n        continue\n    # Convert the BGR image to RGB\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    results = hands.process(image_rgb)\n    # Draw hand annotations on the image",
        "detail": "Youtube Study Tool.plam_stop_play",
        "documentation": {}
    }
]